plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'

    // REST Docs : Asciidoctor 플러그인 적용
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'choi.web'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions // REST Docs : dependencies 에서 적용한 것 추가
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Basic
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Mybatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'
    implementation 'jakarta.validation:jakarta.validation-api:2.0.1'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'mysql:mysql-connector-java:8.0.33'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // REST Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // HATEOAS
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // Bucket4j
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.1.0'

    // Telegram
    implementation 'org.telegram:telegrambots:6.1.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Resilience4j
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.0.2'

    // Redis
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.springframework.boot:spring-boot-starter-cache")

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // Kafka
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // Elastic Search
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch:3.2.0'
}

ext {
    // REST Docs : 아래서 사용할 변수 선언
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()

    // TODO. Restdocs 활성화
    // REST Docs : 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    // outputs.dir snippetsDir

    // TODO. 테스트 코드 활성화
    enabled = false
}

bootJar {
    archiveFileName = 'spring-api.jar'
}

// TODO. jar파일 경로 고려. (aws 배포 때문에 프로젝트 레벨로 옮겼는데 조치 필요)
task moveJar(type: Copy) {
    dependsOn bootJar
    from 'build/libs'
    into projectDir
    include 'spring-api.jar'
}

bootJar.finalizedBy(moveJar)

// TODO. Restdocs 활성화
// REST Docs 관련 설정
//asciidoctor {
//    dependsOn test // test 작업 이후에 동작하도록 설정
//    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
//    inputs.dir snippetsDir // snippetsDir를 입력으로 구성
//}
//
//asciidoctor.doFirst {
//    // static/docs 폴더 비우기
//    delete file('src/main/resources/static/docs')
//}
//
//// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("build/docs/asciidoc")
//    into file("src/main/resources/static/docs")
//}
//
//build {
//    dependsOn copyDocument
//}
//
//bootJar {
//    dependsOn asciidoctor
//    from ("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }
//}
// REST Docs

// QueryDSL 관련 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += [querydslDir]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
// QueryDSL